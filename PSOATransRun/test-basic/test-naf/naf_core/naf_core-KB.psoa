RuleML (

  Prefix(pred: <http://www.w3.org/2007/rif-builtin-predicate#>)
  Prefix(isopl: <https://www.iso.org/standard/21413.html#>)
  Prefix(func: <http://www.w3.org/2007/rif-builtin-function#>)

  Assert (

    % Naf containing atomic formula with various descriptors
    
    o1#f1(-[it1] +[dt1] is1->iv1 ds1+>dv1) :- Naf(o2#f2(ds2+>dv2 -[it2] +[dt2] is2->iv2 ))
    o2#f2( +[dt2] ds2+>dv2 -[it2] is2->iv3333 )
    
    o3#f1(-[it1] +[dt1] is1->iv1 ds1+>dv1) :- Naf(o4#f2(ds2+>dv2 -[it2] +[dt2] is2->iv2 ))
    o4#f2( +[dt2] ds2+>dv2 -[it2] is2->iv3333 is2->iv2 )

    % Queries:
    % o1#f1(-[it1] +[dt1] is1->iv1 ds1+>dv1)  % Yes
    % o3#f1(-[it1] +[dt1] is1->iv1 ds1+>dv1)  % No


    % Embedded atoms
    Theodore#Teacher(dept+>semfe#ntua(town->Zografou))
    Theodore#Student(dept+>ece#ntua(town->Zografou))

    % Queries:
    % Naf(Mark#Teacher(dept+>semfe#ntua(town->Zografou)))        % Yes
    % Naf(Theodore#Teacher(dept+>semfe#unb(town->Fredericton)))  % Yes
    % And(?t#Student(dept+>ece#ntua(town->?pl)) Naf(?t#Teacher(dept+>semfe#unb(town->Fredericton))) )
    % And(?t#Student(dept+>ece#ntua(town->?pl)) Naf(?t#Teacher(dept+>semfe#unb(town->?pl2))) )
    % Naf(And(Theodore#Teacher(dept+>semfe#ntua(town->Zografou)) Theodore#Student(dept+>ece#ntua(town->Zografou))))
    % Naf(Or(Theodore#Teacher(dept+>semfe#ntua(town->Zografou)) Theodore#Student(dept+>ece#ntua(town->Zografou))))


    % The classic bird example

    bird(penguin)
    bird(eagle)
    bird(ostrich)
    bird(crow)
    bird(sparrow)
    bird(pigeon)

    flightless_bird(penguin)
    flightless_bird(ostrich)

    Forall ?X (
        can_fly(?X) :-
            And(
                bird(?X)
                Naf(flightless_bird(?X))
            )
    )

    % Queries:
    % can_fly(?X)
    % And( bird(?X) Naf(can_fly(?X)) )  % ?X=_ostrich; ?X=_penguin


    % The classic bird example, variation

    sandy#ostrich
    tux#penguin
    baldie#eagle

    ostrich##bird
    eagle##bird
    penguin##bird

    ostrich##flightlessbird
    penguin##flightlessbird
    flightlessbird##bird

    Forall ?x (
        ?x#flying_bird :- 
            And( ?x#bird Naf(?x#flightlessbird))
    )

    % Queries:
    % Naf(baldie#flying_bird)  % No
    % Naf(Theodore#flying_bird)
    % Naf(And(Theodore#bird Theodore#flying_bird))
    % Naf(Or(Theodore#bird Theodore#flying_bird))
    
    
    % Queries combining the bird and Teacher predicates:
    % Naf(And(Theodore#bird Theodore#Teacher(dept+>semfe#ntua(town->Zografou))))  % Yes
    % Naf(Or(Theodore#bird Theodore#Teacher(dept+>semfe#ntua(town->Zografou))))   % No


    % Blockchain

    % Facts

    Block(GridBlock1)
    Block(GridBlock2)
    Block(GridBlock3)
    Block(GridBlock4)
    Block(GridBlock5)
    Block(GridBlock6)
    Block(GridBlock7)
    Block(GridBlock8)
    Block(GridBlock9)
    Block(GridBlock10)
    Block(GridBlock11)
    Block(GridBlock3b)
    Block(GridBlock4b)
    Block(GridBlock5b)

    oid(Gridcoin GridLink1)#Link(GridBlock1 GridBlock2)
    oid(Gridcoin GridLink2)#Link(GridBlock2 GridBlock3)
    oid(Gridcoin GridLink3)#Link(GridBlock3 GridBlock4)
    oid(Gridcoin GridLink4)#Link(GridBlock4 GridBlock5)
    oid(Gridcoin GridLink5)#Link(GridBlock5 GridBlock6)
    oid(Gridcoin GridLink6)#Link(GridBlock6 GridBlock7)
    oid(Gridcoin GridLink7)#Link(GridBlock7 GridBlock8)
    oid(Gridcoin GridLink8)#Link(GridBlock8 GridBlock9)
    oid(Gridcoin GridLink9)#Link(GridBlock9 GridBlock10)
    oid(Gridcoin GridLink10)#Link(GridBlock10 GridBlock11)

    % Some orphan blocks
    oid(Gridcoin GridLink2b)#Link(GridBlock2 GridBlock3b)
    oid(Gridcoin GridLink3b)#Link(GridBlock3b GridBlock4b)
    oid(Gridcoin GridLink4b)#Link(GridBlock4b GridBlock5b)   

    % Rules

    Forall ?W ?L ?X ?Y (
      oid(?W ?L)#Chain(?X ?Y len+>2) :-
        oid(?W ?L)#Link(?X ?Y)
    )

    Forall ?W ?L ?M ?X ?Y ?Z ?J ?I(
      oid(?W path(?L ?M))#Chain(?X ?Z len+>?J) :-
        And( oid(?W ?L)#Link(?X ?Y)
             oid(?W ?M)#Chain(?Y ?Z len+>?I)
             ?J=External(func:numeric-add(1 ?I)) )
    )

    Forall ?X ?Y(
        GenesisBlock(?X) :- 
            And(
                Block(?X)
                Naf(
                    %Link(?Y ?X)
                    Exists ?o (?o#Link(?Y ?X))  % variation with Existential
                )
            )
    )

    Forall ?X ?Y (
        EndBlock(?X) :- 
            And(
                Block(?X)
                Naf(
                    %Link(?X ?Y)
                    ?#Chain(?X ? len+>?)  % variation with anonymous variables
                )
            )
    ) 

    Forall ?X ?Y ?J ?Y2 ?J1 (
      MainChain(?X ?Y length->?J) :- 
        And (GenesisBlock(?X)
             EndBlock(?Y)
             EndBlock(?Y2)
             Naf(?Y=?Y2)
             Chain(?X ?Y  len+>?J)
             Chain(?X ?Y2 len+>?J1)
             Naf(External(isopl:greater_than(?J1 ?J)))
        )
    )

    Forall ?X ?Y ?J ?Y2 ?J1 (
      MainChain2(?X ?Y length->?J) :- 
        And (GenesisBlock(?X)
             EndBlock(?Y)
             Chain(?X ?Y  len+>?J)
             Naf(
               And(
                 EndBlock(?Y2)
                 Chain(?X ?Y2 len+>?J1)
                 External(isopl:greater_than(?J1 ?J))
               )
             )
        )
    )

    Forall ?X ?Y ?J ?Y2 ?J1 (
      MainChain3(?X ?Y length->?J) :- 
        And(
          GenesisBlock(?X)
          Chain(?X ?Y len+>?J)
          Naf(
            And(
              Chain(?X ?Y2 len+>?J1)
              External(isopl:greater_than(?J1 ?J))
            )
          )
        )
    )

    % Queries:
    % GenesisBlock(?X)  % ?X=_GridBlock1
    % EndBlock(?X)      % ?X=_GridBlock5b; ?X=_GridBlock11
    % MainChain(?X ?Y length->?J)
    % MainChain2(?X ?Y length->?J)
    % MainChain3(?X ?Y length->?J)  % ?X=_GridBlock1 ?Y=_GridBlock11 ?J=11

  )
)
